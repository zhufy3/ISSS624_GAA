---
title: "In-class Exercise 5"
author: "ZHU Fangyuan"
editor: visual
execute: 
  warning: false
  message: false
format: html
sideNavigator: true
---

## Objectives

In this in-class exercise, we will use ***Logistic Regression*** (LR) and ***Geographical Weighted Logistic Regression*** (GWLR) to model *clean status* of water points on *Osun* state, Nigeria level with observed variables. There are two main objectives to accomplish in this exercise:

## Data Used

-   ***Osun.rds:***

    contains LGA boundaries of Osun state; ***sf*** polygon data frame.

-   ***Osun_wp_sf.rds:***

    contains water points within Osun state; ***sf*** point data frame.

## Model Variables

-   dependent variable:

    -   water point status

-   independent variables:

    -   distance_to_primary_road

    -   distance_to_secondary_road

    -   distance_to_tertiary_road

    -   distance_to_city

    -   distance_to_town

    -   water_point_population

    -   local_population_1km

    -   usage_capacity

    -   is_urban

    -   water_source_clean

## Packages used

Packages below will be used to facilitate the analysis.

-   ***sf:*** importing and processing geospatial data

-   ***tidyverse:*** importing and processing non-spatial data

-   ***funModeling***

-   ***blorr***

-   ***corrplot:*** multivariate data visualisation

-   ***ggpubr***

-   ***spdep:*** spatial data han

-   ***GWmodel***

-   ***tmap:*** geospatial data visualisation

-   ***skimr***

-   ***caret***

-   ***report***: a tidy report of modeling results

```{r}
pacman::p_load(sf,tidyverse,funModeling,blorr,corrplot,ggpubr,spdep,GWmodel,tmap,skimr,caret,report)
```

## Importing Data

We import the spatial and aspatial data sets into R studio environment by using code chunk below.

```{r}
Osun<-read_rds("rds/Osun.rds")
Osun_wp_sf<-read_rds("rds/Osun_wp_sf.rds")
```

## Data Wrangling and EDA

Let us check the frequencies of each binary variables in water point *status* using code below.

```{r}
Osun_wp_sf%>%
  freq(input='status')
```

### Tidy up data frame

Note that water point's clean status of *TRUE* takes 55.5% in the whole observations, while *FALSE* takes 44.4%, *NA* takes 3.17% respectively. Therefore, number of clean water points are slightly more than that of unclean water points in Osun State. Now let us recode missing value in *status_clean* in aspatial data frame with *"Unknown"* using codes below and get the description for the data frame using function *skim().*

```{Osun_wp_sf%>%}
  skim()
```

Note that within the whole 75 variables in data set Osun_wp_sf, there are 47 character type, 5 logical type and 23 numeric variables. Now let us remove observations with missing values using code chunk below.

```{r}
Osun_wp_sf_clean<-Osun_wp_sf%>%
  filter_at(vars(status,
                 distance_to_primary_road,
                 distance_to_secondary_road,
                 distance_to_tertiary_road,
                 distance_to_city,
                 distance_to_town,
                 water_point_population,
                 local_population_1km,
                 usage_capacity,
                 is_urban,
                 water_source_clean),
            all_vars(!is.na(.)))%>%
  mutate(usage_capacity=as.factor(usage_capacity))
```

Continuely tidy up the data frame by extracting variables used in the analysis using codes below.

```{r}
Osun_wp<-Osun_wp_sf_clean%>%
  select(c(7,35:39,42:43,46:47,57))%>%
  st_set_geometry(NULL)
```

### Multivariate Visualisation

Before we build the model, we should check the multivariate between the independent variables. Let plot a correlation map using codes below.

```{r}
cluster_var.cor=cor(
  Osun_wp[,2:7])
corrplot.mixed(cluster_var.cor,
               lower = "ellipse",
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col="black")
```

## Linear Regression Modeling

Note that all variables have relatively low correlations. Now we can build model of general linear regression using codes below.

```{r}
model<-glm(data = Osun_wp_sf_clean,
           family = binomial(link='logit'),
           status~distance_to_primary_road+
             distance_to_secondary_road+
             distance_to_city+
             distance_to_town+
             distance_to_tertiary_road+
             is_urban+
             usage_capacity+
             water_source_clean+
             water_point_population+
             local_population_1km
    )
```

Report the output.

```{r}
blr_regress(model)
```

```{r}
report(model)
```

Note that *distance_to_primary_road* has p-value of 0.4744 and *distance_to_secondary_road* has p-value of 0.5802, both of which are larger than **0.05**, meaning that these two variables are not statistically significant in the linear regression model. Other variables on the countray are all significant. Therefore we should remove these two variables and build models again.

```{r}
model2<-glm(data = Osun_wp_sf_clean,
           family = binomial(link='logit'),
           status~distance_to_city+
             distance_to_town+
             distance_to_tertiary_road+
             is_urban+
             usage_capacity+
             water_source_clean+
             water_point_population+
             local_population_1km
    )
blr_regress(model2)
```

```{r}
report(model2)
```

Now we can compare the *model* and *model2,* which removed insignificant variables already.

```{r}
blr_confusion_matrix(model,cutoff = 0.5)
```

![](images/Capture.PNG)

The reports read 0-0 = 1301, 1-1=1904 for the original model

Convert the data frame into *spatial* data file.

```{r}
Osun_wp_sp<-Osun_wp_sf_clean%>%
  select(c(status,
           distance_to_city,
           distance_to_primary_road,
           distance_to_secondary_road,
           distance_to_tertiary_road,
           distance_to_town,
           water_point_population,
           local_population_1km,
           is_urban,
           usage_capacity,
           water_source_clean))%>%
  as_Spatial()

Osun_wp_sp
```

```{r eval=FALSE}
bw.fixed<-bw.ggwr(data = Osun_wp_sp,
           family = "binomial",
           status~distance_to_primary_road+
             distance_to_secondary_road+
             distance_to_city+
             distance_to_town+
             distance_to_tertiary_road+
             is_urban+
             usage_capacity+
             water_source_clean+
             water_point_population+
             local_population_1km,
           approach = "AIC",
           kernel="gaussian",
           adaptive = FALSE,
           longlat = FALSE)
```

```{r}
gwlr.fixed<-ggwr.basic(status~distance_to_primary_road+
             distance_to_secondary_road+
             distance_to_city+
             distance_to_town+
             distance_to_tertiary_road+
             is_urban+
             usage_capacity+
             water_source_clean+
             water_point_population+
             local_population_1km,
             data = Osun_wp_sp,
             bw=2597.255,
           family = "binomial",
           kernel="gaussian",
           adaptive = FALSE,
           longlat = FALSE)
```

Next, we will label yhat values greater or equal to 0.5 into 1 and else 0. The result of the logic comparison operation will be saved into a field called *most.*

```{r}
gwr.fixed<-as.data.frame(gwlr.fixed$SDF)

```

```{r eval=FALSE}

gwr.fixed<-gwr.fixed%>%
  mutate(most=ifelse(
    gwr.fixed$yhat>=0.5,T,F
  ))

gwr.fixed$y<-as.factor(gwr.fixed$y)
gwr.fixed$most<-as.factor(gwr.fixed$most)
CM<-confusionMatrix(data = gwr.fixed$most,reference = gwr.fixed$y)
CM 
```

The code chunks below is used to create an interactive point symbol map.

```{r eval=FALSE}
tmap_mode("view")
prob_T<-tm_shape(Osun)+
  tm_polygons(alpha = 0.1)+
  tm_shape(gwr_sf.fixed)+
  tm_
```
