---
title: "In-class Exercise 5"
author: "ZHU Fangyuan"
editor: visual
execute: 
  warning: false
  message: false
format: html
sideNavigator: true
---

## 1 Objectives

In this in-class exercise, we will use ***Logistic Regression*** (LR) and ***Geographical Weighted Logistic Regression*** (GWLR) to model *clean status* of water points on *Osun* state, Nigeria level with observed variables. There are two main objectives to accomplish in this exercise:

## 2 Data Used

-   ***Osun.rds:***

    contains LGA boundaries of Osun state; ***sf*** polygon data frame.

-   ***Osun_wp_sf.rds:***

    contains water points within Osun state; ***sf*** point data frame.

## 3 Model Variables

-   dependent variable:

    -   water point status

-   independent variables:

    -   distance_to_primary_road

    -   distance_to_secondary_road

    -   distance_to_tertiary_road

    -   distance_to_city

    -   distance_to_town

    -   water_point_population

    -   local_population_1km

    -   usage_capacity

    -   is_urban

    -   water_source_clean

## 4 Packages used

Packages below will be used to facilitate the analysis.

-   ***sf:*** importing and processing geospatial data

-   ***tidyverse:*** importing and processing non-spatial data

-   ***funModeling***

-   ***blorr***

-   ***corrplot:*** multivariate data visualisation

-   ***ggpubr***

-   ***spdep:*** spatial data han

-   ***GWmodel***

-   ***tmap:*** geospatial data visualisation

-   ***skimr***

-   ***caret***

-   ***report***: a tidy report of modeling results

```{r}
pacman::p_load(sf,tidyverse,funModeling,blorr,corrplot,ggpubr,spdep,GWmodel,tmap,skimr,caret,report)
```

## 5 Importing Data

We import the spatial and aspatial data sets into R studio environment by using code chunk below.

```{r}
Osun<-read_rds("rds/Osun.rds")
Osun_wp_sf<-read_rds("rds/Osun_wp_sf.rds")
```

## 6 Data Preparation

### 6.1 Data Wrangling and EDA

Let us check the frequencies of each binary variables in water point *status* using code below.

```{r}
Osun_wp_sf%>%
  freq(input='status')
```

### 6.2 Tidy up data frame

Note that water point's clean status of *TRUE* takes 55.5% in the whole observations, while *FALSE* takes 44.4%, *NA* takes 3.17% respectively. Therefore, number of clean water points are slightly more than that of unclean water points in Osun State. Now let us recode missing value in *status_clean* in aspatial data frame with *"Unknown"* using codes below and get the description for the data frame using function *skim().*

```{Osun_wp_sf%>%}
  skim()
```

Note that within the whole 75 variables in data set Osun_wp_sf, there are 47 character type, 5 logical type and 23 numeric variables. Now let us remove observations with missing values using code chunk below.

```{r}
Osun_wp_sf_clean<-Osun_wp_sf%>%
  filter_at(vars(status,
                 distance_to_primary_road,
                 distance_to_secondary_road,
                 distance_to_tertiary_road,
                 distance_to_city,
                 distance_to_town,
                 water_point_population,
                 local_population_1km,
                 usage_capacity,
                 is_urban,
                 water_source_clean),
            all_vars(!is.na(.)))%>%
  mutate(usage_capacity=as.factor(usage_capacity))
```

Continuely tidy up the data frame by extracting variables used in the analysis using codes below.

```{r}
Osun_wp<-Osun_wp_sf_clean%>%
  select(c(7,35:39,42:43,46:47,57))%>%
  st_set_geometry(NULL)
```

### 6.3 Multivariate Visualisation

Before we build the model, we should check the multivariate between the independent variables. Let plot a correlation map using codes below.

```{r}
cluster_var.cor=cor(
  Osun_wp[,2:7])
corrplot.mixed(cluster_var.cor,
               lower = "ellipse",
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col="black")
```

## 7 Logistic Regression Modeling

### 7.1 Model with original data

Note that all variables have relatively low correlations. Now we can build model of general logistic regression using codes below.

```{r}
model<-glm(data = Osun_wp_sf_clean,
           family = binomial(link='logit'),
           status~distance_to_primary_road+
             distance_to_secondary_road+
             distance_to_city+
             distance_to_town+
             distance_to_tertiary_road+
             is_urban+
             usage_capacity+
             water_source_clean+
             water_point_population+
             local_population_1km
    )
```

Report the output.

```{r}
blr_regress(model)
```

```{r}
report(model)
```

### 7.2 Model with revised data

Note that *distance_to_primary_road* has p-value of 0.4744 and *distance_to_secondary_road* has p-value of 0.5802, both of which are larger than **0.05**, meaning that these two variables are not statistically significant in the linear regression model. Other variables on the countray are all significant. Therefore we should remove these two variables and build models again.

```{r}
model2<-glm(data = Osun_wp_sf_clean,
           family = binomial(link='logit'),
           status~distance_to_city+
             distance_to_town+
             distance_to_tertiary_road+
             is_urban+
             usage_capacity+
             water_source_clean+
             water_point_population+
             local_population_1km
    )
blr_regress(model2)
```

```{r}
report(model2)
```

Now we can compare the *model* and *model2,* which removed insignificant variables already.

```{r}
blr_confusion_matrix(model,cutoff = 0.5)
blr_confusion_matrix(model2,cutoff = 0.5)
```

The reports read TN = 1301, TP=1904, accuracy rate = 0.6739 for the original model; TN=1300, TP=1899, accuracy rate = 0.6726 for model2 which removed insignificant variables. Though removed tow insignificant variables, the TN and TP didn't improve significantly, but the accuracy rates are almost the same, and the complexity of LR model has been decreased.

## 8 Geographical Weighted Linear Regression Model

### 8.1 Model with original data

#### 8.1.1 Converting data frame into spatial data frame

To build GWLR model, we should first convert the data frame into *spatial* data file to fit the function.

```{r}
Osun_wp_sp<-Osun_wp_sf_clean%>%
  select(c(status,
           distance_to_city,
           distance_to_primary_road,
           distance_to_secondary_road,
           distance_to_tertiary_road,
           distance_to_town,
           water_point_population,
           local_population_1km,
           is_urban,
           usage_capacity,
           water_source_clean))%>%
  as_Spatial()

Osun_wp_sp
```

#### 8.1.2 Building fixed bandwidth GWR model

```{r eval=FALSE}
bw.fixed<-bw.ggwr(data = Osun_wp_sp,
           family = "binomial",
           status~distance_to_primary_road+
             distance_to_secondary_road+
             distance_to_city+
             distance_to_town+
             distance_to_tertiary_road+
             is_urban+
             usage_capacity+
             water_source_clean+
             water_point_population+
             local_population_1km,
           approach = "AIC",
           kernel="gaussian",
           adaptive = FALSE,
           longlat = FALSE)
```

We get the bandwidth of 2597.255. Then we input the bandwidth into GWLR model.

```{r eval=FALSE}
gwlr.fixed<-ggwr.basic(status~distance_to_primary_road+
             distance_to_secondary_road+
             distance_to_city+
             distance_to_town+
             distance_to_tertiary_road+
             is_urban+
             usage_capacity+
             water_source_clean+
             water_point_population+
             local_population_1km,
             data = Osun_wp_sp,
             bw=bw.fixed,
           family = "binomial",
           kernel="gaussian",
           adaptive = FALSE,
           longlat = FALSE)
```

#### 8.1.3 Converting SDF into sf data frame

To assess the performance of the GWLR, firstly we will convert the SDF object in as data frame by using the code chunk below.

```{r eval=FALSE}
gwr.fixed<-as.data.frame(gwlr.fixed$SDF)
```

Next, we will label yhat values greater or equal to 0.5 into 1 and else 0. The result of the logic comparison operation will be saved into a field called *most.*

```{r eval=FALSE}
gwr.fixed<-gwr.fixed%>%
  mutate(most=ifelse(
    gwr.fixed$yhat>=0.5,T,F
  ))

gwr.fixed$y<-as.factor(gwr.fixed$y)
gwr.fixed$most<-as.factor(gwr.fixed$most)
CM<-confusionMatrix(data = gwr.fixed$most,reference = gwr.fixed$y)
CM 
```

The reports read TN = 1824, TP=2379, accuracy rate = 0.8837. Confidence interval with 95% level is (0.8743, 0.8927).

### 8.2 Model with revised data

Next we build GWLR model with removed insignificant variables.

```{r eval=FALSE}
bw.fixed.rm<-bw.ggwr(data = Osun_wp_sp,
           family = "binomial",
           status~
             distance_to_city+
             distance_to_town+
             distance_to_tertiary_road+
             is_urban+
             usage_capacity+
             water_source_clean+
             water_point_population+
             local_population_1km,
           approach = "AIC",
           kernel="gaussian",
           adaptive = FALSE,
           longlat = FALSE)
```

```{r eval=FALSE}
gwlr.fixed.rm<-ggwr.basic(status~
             distance_to_city+
             distance_to_town+
             distance_to_tertiary_road+
             is_urban+
             usage_capacity+
             water_source_clean+
             water_point_population+
             local_population_1km,
             data = Osun_wp_sp,
             bw=bw.fixed.rm,
           family = "binomial",
           kernel="gaussian",
           adaptive = FALSE,
           longlat = FALSE)
```

```{r eval=FALSE}
gwr.fixed.rm<-as.data.frame(gwlr.fixed.rm$SDF)
```

```{r eval=FALSE}
gwr.fixed.rm<-gwr.fixed.rm%>%
  mutate(most=ifelse(
    gwr.fixed.rm$yhat>=0.5,T,F
  ))

gwr.fixed.rm$y<-as.factor(gwr.fixed.rm$y)
gwr.fixed.rm$most<-as.factor(gwr.fixed.rm$most)
CM.rm<-confusionMatrix(data = gwr.fixed.rm$most,reference = gwr.fixed.rm$y)
CM.rm
```

The reports read TN = 1833, TP=2374, accuracy rate = 0.8846. Confidence interval with 95% level is (0.8751, 0.8935).

Below are comparison of performance of each model. Note that GWLR model with revised data has the best accuracy rate and True Negative rate.

|                             | TN   | TP   | Accuracy Rate |
|-----------------------------|------|------|---------------|
| **LR** with original data   | 1301 | 1904 | 0.6739        |
| **LR** with revised data    | 1300 | 1899 | 0.6726        |
| **GWLR** with original data | 1824 | 2379 | 0.8837        |
| **GWLR** with revised data  | 1833 | 2374 | 0.8846        |

### 8.3 Visualising coefficient estimates

The code chunks below is used to create an interactive point symbol map. First we create a base geospatial data frame *Osun_wp_sf_selected*.

```{r}
Osun_wp_sf_selected<-Osun_wp_sf_clean%>%
  select(c(ADM2_EN, ADM2_PCODE,
           ADM1_EN, ADM1_PCODE,
           status))
```

Then we combine aspatial data frame with spatial data frame with codes below.

```{r eval=FALSE}
gwr_sf.fixed<-cbind(Osun_wp_sf_selected, gwr.fixed.rm)
write_rds(gwr_sf.fixed,"rds/gwr_sf.fixed.rds")
```

```{r}
gwr_sf.fixed<-read_rds("rds/gwr_sf.fixed.rds")
tmap_mode("view")
prob_T<-tm_shape(Osun)+
  tm_polygons(alpha = 0.1)+
  tm_shape(gwr_sf.fixed)+
  tm_dots(col = "yhat",
          border.col="gray60",
          border.lwd=1)+
  tm_view(set.zoom.limits = c(8,14))
prob_T
```

The map shows points in deeper color have higher possibility of clean water, while points in lighter color have higher possibility of unclean water. Note that water points in central positions of the state have more congregated clean water points than that of other locations.
