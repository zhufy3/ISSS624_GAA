---
title: "Hands-on Ex2"
editor: visual
---

# Overview

In this chapter, we will learn what is spatial autocorrelation, Localised Geospatial Analysis, Cluster and Outlier Analysis, and Hot Spot and Cold Spot Areas Analysis.

## 1. What is Spatial Autocorrelation

-   Tobler's First Law of Geolgraphy:
    Everything is related to everything else,\
    but near things are more related than distant things

-   Spatial Dependence

    Spatial relationship of variable values.

-   Spatial Autocorrelation

    Measured as spatial dependence in a correlation of random variables. Positive Autocorrelation; Negative Autocorrelation.

-   Detecting Spatial Clusters and Outliers: Moran's I; Geary's c; z-score & p-value.

    ## 2. Objective for The Case Study

    The objective in this study is to apply appropriate spatial
    statistical methods to discover if development are even distributed
    geographically.

    ## 3. Study Area and Data

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

Hunan_2012.csv: This csv file contains selected Hunan\'s local development indicators in 2012.

## 2. Analytical tools

### 2.1 R Packages Will Be Used

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

### 2.2 Analytical Methods

-   Importing data into R environment using **sf**

-   Wrangling attributes data using **tidyverse**

-   Computing spatial weight, local and global spatial autocorrelation statistics using **spdep**

-   Plotting cartographic quality chropleth map with **tmap**

## 3. Importing Data

### 3.1 Importing Shapefiles

The imported shapefile in ESRI form will be **simple features objects of sf.**

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

Next we import *Hunan_2012.csv* data into R.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

We join the attribute field data with Hunan's spatial polygon data frame.

```{r}
hunan <- left_join(hunan,hunan2012)
```

## 4. Visualizing Development Indicator

We plot a base map and chropleth map based on GDPCC of the province by using qtm() of **tamp.**
The "equal" style divides the range of the variable into n parts.
The "quantile" style provides quantile breaks.

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## 5. Autocorrelation

### 
5.1 Computing Queen contiguity weight matrix

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

### 5.2 Row-standardised weights matrix

Neighboring polygon will be assigned equal weight (style=\"W\")

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

### 5.3 Global Spatial Autocorrelation: Moran's I

#### 5.3.1 Moran's I test

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

#### 5.3.2 Computing Monte Carlo Moran's I

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

#### 5.3.3 Visualizing Monte Carlo Moran's I

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

#### 

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

### 5.4 Global Spatial Autocorrelation: Geary's 

#### 5.4.1 Geary's C Test

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

#### 5.4.2 Computing Monte Carlo Geary's C

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

#### 5.4.3 Visualizing Monte Carlo Geary's C

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

### 6. Spatial Correlogram

#### 6.1 Moran's I Correlogram

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

```{r}
print(MI_corr)
```

#### 6.2 Geary's C Correlogram

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

```{r}
print(GC_corr)
```

### 7. Clusters and Outlier Analysis

#### 7.1 Computing Local Moran's I

The code chunks below are used to compute local Moran\'s I of *GDPPC2012* at the county level.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

```{r}
printCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)
```

#### 7.3 Mapping the Moran's I

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

#### 7.2 Mapping local Moran's I values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

#### 7.4 Mapping local Moran's I p-values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

#### 7.5 Mapping both local Moran's I values and p-values

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

### 8. Creating LISA Cluster Map

#### 8.1 Plotting Moran Scatterplot

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

#### 8.2  Plotting Moran scatterplot with standardised variable

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector 
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

#### 8.3 Preparing LISA Map Classes

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
DV <- hunan$GDPPC - mean(hunan$GDPPC)     
C_mI <- localMI[,1] - mean(localMI[,1])    
```

We set significant level for the local Moran.

```{r}
signif <- 0.05       
```

These four command lines define the high-high, low-low, low-high and high-low categories.

```{r}
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 1      
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
```

Lastly, places non-significant Moran in the category 0.

```{r}
quadrant[localMI[,5]>signif] <- 0
```

#### 8.4 Plotting LISA Map

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

For effective interpretation, it is better to plot both the local
Moran\'s I values map and its corresponding p-values map next to each
other.

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, asp=1, ncol=2)
```

### 9. Hot Spot and Cold Spot Area Analysis

#### 9.1 Deriving distance-based weight matrix

##### 9.1.1 Deriving the centroid

## References


